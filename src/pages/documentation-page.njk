{% extends "__layout.njk" %}

{% block Link %}
	<link rel="stylesheet" href="css/flatpickr.min.css">
	<link rel="stylesheet" href="css/choices.min.css">
{% endblock %}

{% block Header %}
	{% include "include/blue-line.njk" %}
	<div class="breadcrumbs">
		<div class="container">
			<ul class="breadcrumbs__list">
				<li class="breadcrumbs__item">
					<a href="" class="breadcrumbs__link">Главная</a>
					<svg>
						<use xlink:href="img/sprite.svg#svg--arrow-two">
					</svg>
				</li>
				<li class="breadcrumbs__item">
					<a href="" class="breadcrumbs__link">Пункт меню</a>
					<svg>
						<use xlink:href="img/sprite.svg#svg--arrow-two">
					</svg>
				</li>
				<li class="breadcrumbs__item">
					<a href="" class="breadcrumbs__link">Пункт меню Пункт меню Пункт меню Пункт меню Пункт меню</a>
					<svg>
						<use xlink:href="img/sprite.svg#svg--arrow-two">
					</svg>
				</li>
				<li class="breadcrumbs__item">
					<span class="breadcrumbs__link">Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости Главные новости</span>
				</li>
			</ul>
		</div>
	</div>
{% endblock %}

{% block Content %}
	<section class="content-page">
		<div class="container">
			<div class="row-title row-title--change">
				<h2 class="title"><a href="#">Документы администрации</a> / <a href="#" class="link-active">Документы городской Думы</a></h2>
			</div>
		</div>
		<div class="filter-documentation gray-bg">
			<div class="container">
				<form action="" class="filter-documentation__form">
					<div class="filter-documentation__wrapper">
						<div class='filter-documentation__wrap filter-documentation__wrap--select'>
							<span class='wrap-field__description'>Категория:</span>
							<div class='select-wrap' id='category'>
								<select class='select select-category-document' name="all-documents">
									<option placeholder>Все документы</option>
									<option value='1'>1</option>
									<option value='2'>2</option>
									<option value='3'>3</option>
									<option value='4'>4</option>
								</select>
							</div>
						</div>
						<div class="filter-documentation__wrap filter-documentation__wrap--name">
							<div class="wrap-field">
								<label>
									<span class="wrap-field__description">Название документа:</span>
									<input type="text" class="wrap-field__field" name='name-doc' placeholder="Введите название">
								</label>
							</div>
						</div>
						<div class="filter-documentation__wrap filter-documentation__wrap--date">
							<div class="wrap-field">
								<label>
									<span class="wrap-field__description">Дата подписания с:</span>
									<input type="tel" id="date-from" name="date-from" class="wrap-field__field" placeholder="ДД.ММ.ГГГГ">
									<svg>
										<use xlink:href="img/sprite.svg#svg--calendar-icon">
									</svg>
								</label>
							</div>
						</div>
						<div class="filter-documentation__wrap filter-documentation__wrap--date">
							<div class="wrap-field">
								<label>
									<span class="wrap-field__description">по:</span>
									<input type="tel" id="date-to" name="date-to" class="wrap-field__field" placeholder="ДД.ММ.ГГГГ">
									<svg>
										<use xlink:href="img/sprite.svg#svg--calendar-icon">
									</svg>
								</label>
							</div>
						</div>
						<div class="filter-documentation__wrap filter-documentation__wrap--number">
							<div class="wrap-field">
								<label>
									<span class="wrap-field__description">Номер документа: <span class="hint-message">?<span class="message-copy"><span>Мои полномочия на этом собственно все!</span></span></span></span>
									<input type="text" class="wrap-field__field" name='numb-doc' placeholder="Введите номер">
								</label>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
		<div class="documentation-sect">
			<div class="container">
				<div class="documentation-sect__wrapper">
					<div class="documentation-sect__row">
						<div class="news-post">
              <div class="news-post__wrapper">
                <div class="news-post__row">
                  <span class="info-text date">05 марта 2021, 10:24</span>
                  <a href="#" class="topic-item topic-item--change topic-item--change-collor">
                    <div class="topic-item__wrapper">
                      <span class="topic-item__text">Национальные проекты</span>
                    </div>
                  </a>
                </div>
                <a href="#" class="news-post__wrap-text">
                  <h3>Решение городской Думы Краснодара от 17.12.2020 № 5 п. 6 «Об опубликовании проекта решения городской Думы Краснодара «О внесении изменений в Устав муниципального образования город Краснодар»</h3>
                </a>
              </div>
            </div>
					</div>
					<div class="documentation-sect__row">
						<div class="news-post">
              <div class="news-post__wrapper">
                <div class="news-post__row">
                  <span class="info-text date">05 марта 2021, 10:24</span>
                </div>
                <a href="#" class="news-post__wrap-text">
                  <h3>Заключение о результатах публичных слушаний по проекту решения городской Думы Краснодара «О внесении изменений в Устав муниципального образования город Краснодар»</h3>
                </a>
              </div>
            </div>
					</div>
					<div class="documentation-sect__row">
						<div class="news-post">
              <div class="news-post__wrapper">
                <div class="news-post__row">
                  <span class="info-text date">05 марта 2021, 10:24</span>
                  <a href="#" class="topic-item topic-item--change topic-item--change-collor">
                    <div class="topic-item__wrapper">
                      <span class="topic-item__text">Национальные проекты</span>
                    </div>
                  </a>
                </div>
                <a href="#" class="news-post__wrap-text">
                  <h3>Порядок обжалования нормативных правовых актов и иных решений, принятых администрацией муниципального образования город Краснодар</h3>
                </a>
              </div>
            </div>
					</div>
					<div class="documentation-sect__row">
						<div class="news-post">
              <div class="news-post__wrapper">
                <div class="news-post__row">
                  <span class="info-text date">05 марта 2021, 10:24</span>
                </div>
                <a href="#" class="news-post__wrap-text">
                  <h3>Решение городской Думы Краснодара от 17.12.2020 № 5 п. 6 «Об опубликовании проекта решения городской Думы Краснодара «О внесении изменений в Устав муниципального образования город Краснодар»</h3>
                </a>
              </div>
            </div>
					</div>
				</div>
			</div>
		</div>
		<div class="pagination">
			<div class="container">
				<div class="pagination__wrapper">
					<div class="pagination__left">
						<a href="#" class="btn-white" data-btn-pagination="prev">
							<svg>
								<use xlink:href="img/sprite.svg#svg--arrow-two"></use>
							</svg>
							<span class="btn-white__text">Предыдущая</span>
						</a>
					</div>
					<ul class="pagination__list">
						<li class="pagination__item"><a href="#" class="pagination__link pagination__link--active">1</a></li>
						<li class="pagination__item"><a href="#" class="pagination__link">2</a></li>
						<li class="pagination__item"><a href="#" class="pagination__link">3</a></li>
						<li class="pagination__item"><a href="#" class="pagination__link">4</a></li>
						<li class="pagination__item"><a href="#" class="pagination__link">5</a></li>
						<li class="pagination__item"><a href="#" class="pagination__link">6</a></li>
						<li class="pagination__item"><a href="#" class="pagination__link pagination__link--dotted">...</a></li>
						<li class="pagination__item"><a href="#" class="pagination__link">10</a></li>
					</ul>
					<div class="pagination__right">
						<a href="#" class="btn-white" data-btn-pagination="next">
							<svg>
								<use xlink:href="img/sprite.svg#svg--arrow-two"></use>
							</svg>
							<span class="btn-white__text">Следующая</span>
						</a>
					</div>
				</div>
			</div>
		</div>
		<div class="row-btn">
			<div class="container">
				<a href="#" class="btn-white btn-more" data-btn-more><span class="btn-white__text">Загрузить предыдущие документы</span></a>
			</div>
		</div>
	</section>
	{% include "include/modal.njk" %}
{% endblock %}

{% block Scripts %}
	<script src="js/flatpickr.js"></script>
	<script src="js/flatpickr-ru.js"></script>
	<script src="js/choices.min.js"></script>
	<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
	<script>
		const filterForm = document.querySelector('.filter-documentation__form');
		const listDocument = document.querySelector('.documentation-sect__wrapper');
		const paginationList = document.querySelector('.pagination__list');
		const arrLinnks = paginationList.querySelectorAll('li .pagination__link');
		let count;
		let interval;
		let arrField = [];
		let leftBorder;
		let rightBorder;

		const choices = new Choices('.select', {
			itemSelectText: '',
			searchEnabled: false,
			placeholder: true,
		});

		let calendarDateFrom = flatpickr("#date-from", {
			"locale": "ru",
			dateFormat: "Y-m-d",
			monthSelectorType: "static",
			nextArrow: "<svg width='18' height='21' viewBox='0 0 18 21' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M9 1L9 19M9 19L17 10.9543M9 19L1 10.9543' stroke-width='2' stroke-linecap='round'/></svg>",
			prevArrow: "<svg width='18' height='21' viewBox='0 0 18 21' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M9 1L9 19M9 19L17 10.9543M9 19L1 10.9543' stroke-width='2' stroke-linecap='round'/></svg>",
		});
		let calendarDateTo = flatpickr("#date-to", {
			"locale": "ru",
			dateFormat: "Y-m-d",
			monthSelectorType: "static",
			nextArrow: "<svg width='18' height='21' viewBox='0 0 18 21' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M9 1L9 19M9 19L17 10.9543M9 19L1 10.9543' stroke-width='2' stroke-linecap='round'/></svg>",
			prevArrow: "<svg width='18' height='21' viewBox='0 0 18 21' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M9 1L9 19M9 19L17 10.9543M9 19L1 10.9543' stroke-width='2' stroke-linecap='round'/></svg>",
		});

		const changeDocument = {
			prevNomer: 0,
			nomer: 1,
			show: 8,
			count: 20,
			items: ['1', '2', '3', '4', '5', '6', '7', '20'],
			animatePreloader: function(selector) {
				let parentPaste = document.querySelector(selector);
				parentPaste.insertAdjacentHTML('beforeend', '<div class="preloader-wrap"><svg version="1.1" id="preloader-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"   viewBox="0 0 100 100" enable-background="new 0 0 0 0" xml:space="preserve"><path fill="#fff" d="M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50"><animateTransform attributeName="transform" attributeType="XML" type="rotate" dur="1s" from="0 50 50" to="360 50 50" repeatCount="indefinite" /></path></svg></div>');
			},
			go: function (nomer) {
				this.prevNomer = this.nomer;
				this.nomer = nomer;
				this.render();
			},
			render: function () {

				var nomer = this.nomer;
				var show = this.show;
				var count = this.count;

				leftBorder = 2;
				rightBorder = count - 1;
				var showLeftDots = false;
				var showRightDots = false;


				if (show < count) {

					var devide = Math.floor((show - 2) / 2);

					var leftBorder = nomer - devide;
					var rightBorder = nomer + devide - 1;

					if (leftBorder < 2) {
						showRightDots = true;
						leftBorder = 2;
						rightBorder = leftBorder + (show - 2) - 1;
					} else if (rightBorder > count - 1) {
						showLeftDots = true;
						rightBorder = count - 1;
						leftBorder = rightBorder - (show - 2) + 1;
					} else {
						showLeftDots = true;

						showRightDots = true;
					}
				};

				console.log(this);
				console.log('leftBorder ' + leftBorder, showLeftDots);
				console.log('rightBorder ' + rightBorder, showRightDots);
				this.items = [];

				var length = show;
				if (length > count) {
					length = count;
				}

				for (i = 1; i <= length; i++) {

					if (i == 1) {
						this.items.push(i);
					} else if (i == length) {
						this.items.push(count);
					} else {
						if (showLeftDots && showRightDots) {
							// this.items.push(leftBorder++);
						} else {
							// this.items.push(leftBorder++);
						}
						this.items.push(leftBorder++);
					};
				};


				if (document.documentElement.clientWidth > 767) {
					if ((rightBorder - leftBorder) < 4) {
						if (showLeftDots && showRightDots) {
							if (rightBorder + 1 == count) {
								showRightDots = false;
							} else {
								for (i = 2, l = this.items.length - 2; i <= l; i++) {
									this.items[i]++;
								}
							}
						}
					}
				};

				if (showLeftDots) {
					this.items[1] = '...';
				};

				if (showRightDots) {
					this.items[(this.items.length - 2)] = '...';
				};
				console.log(this.items);
			},
			refreshPagination: function (arr) {
				arrLinnks.forEach(function (item) {
					item.textContent = '';
					item.classList.remove('pagination__link--active');
				});

				for (let i = 0; i < arrLinnks.length; i++) {
					arrLinnks[i].textContent = arr[i];
					arrLinnks[i].closest('.pagination__item').classList.remove('pagination__item--hide');
					arrLinnks[i].classList.remove('pagination__link--dotted');
					if (arrLinnks[i].textContent === '') {
						arrLinnks[i].closest('.pagination__item').classList.add('pagination__item--hide');
					} else if (arrLinnks[i].textContent === '...') {
						arrLinnks[i].classList.add('pagination__link--dotted');
					}
				}
			},
			createListDocuments: function (arr) {
				console.log(arr);

				if (arr.length === 0) {
					document.querySelector('.pagination').style.display = 'none';
					document.querySelector('.btn-more').style.display = 'none';
					listDocument.insertAdjacentHTML('beforeend', '<h2 class="title title-message">В этом разделе нет документов</h2>');
				} else {
					document.querySelector('.title-message').remove();
					arr.documents.forEach(function (item) {
						function addCategory(nameCategory) {
							let result = '';
							nameCategory.forEach(function (i) {
								result += `<a href='#' class='topic-item topic-item--change topic-item--change-collor'><div class='topic-item__wrapper'><span class='topic-item__text'>${i}</span></div></a>`;
							});
							return result;
						};

						listDocument.insertAdjacentHTML('beforeend', `<div class='documentation-sect__row'><div class='news-post'><div class='news-post__wrapper'><div class='news-post__row'><span class='info-text date'>${item.date}</span>${addCategory(item.category)}</div><a href='#' class='news-post__wrap-text'><h3>${item.nameDocument}</h3></a></div></div></div>`);
					});
					document.querySelector('.pagination').style.display = '';
					document.querySelector('.btn-more').style.display = '';
				}				
			},
			cicleField: function () {
				arrField = [];
				filterForm.querySelectorAll('input').forEach(function (i) {
					let fieldSuccessful = {
						nameInput: '',
						value: '',
					};
					fieldSuccessful.nameInput = i.getAttribute('name');
					fieldSuccessful.value = i.value;
					arrField.push(fieldSuccessful);
				});
			},
			timer: function (arrFilter) {
				clearInterval(interval);
				count = 12;
				interval = setInterval(() => {
					count--;
					console.log('count: ', count--);
					if (count <= 0) {
						clearInterval(interval);
						// Здесь скрипт очиски списка документов и получение данных

						listDocument.querySelectorAll('*').forEach(function (i) {
							i.remove();
						});

						axios({
							method: 'post',
							url: '',
							data: {
								arrFilter
							}
						}).then(function (response) {
							console.log(response);
						}).catch(function (error) {
							console.log(error);
						});

						fetch('js/documentList.json').then(response => response.json()).then(data => {
							this.createListDocuments(data);
							this.count = data.pagination;


							// генерация пагинации
							if (document.documentElement.clientWidth < 768) {
								console.log('меньше 768')
								this.show = 5;
								this.nomer = 1;
								this.render();
								this.refreshPagination(this.items);
							} else if (document.documentElement.clientWidth < 1300 && document.documentElement.clientWidth > 767) {
								console.log('меньше 1300')
								this.show = 6;
								this.nomer = 1;
								this.render();
								this.refreshPagination(this.items);
							} else {
								console.log(this.count);
								this.nomer = 1;
								this.render();
								this.refreshPagination(this.items);
							}
							arrLinnks[0].classList.add('pagination__link--active');
							// генерация пагинации --- конец
						});

						// Здесь скрипт очиски списка документов и получение данных -- end
					}
				}, 200);
			},
			clickFunction: function (elem, target) {
				let numberItem = {
					numberPage: '',
				};
				// let index = [...elem.querySelectorAll('.pagination__link')].findIndex(el => el == event.target);
				paginationList.querySelectorAll('.pagination__link').forEach(function (i) {
					i.classList.remove('pagination__link--active');
				});

				if (target.classList.contains('pagination__link--dotted') || target.classList.contains('pagination__link--active')) {} else {
					this.go(Number(target.textContent));
					this.refreshPagination(this.items);
				};

				this.cicleField();
				filterForm.querySelectorAll('select').forEach(function (i) {
					let fieldSuccessful = {
						nameInput: '',
						value: '',
					};
					fieldSuccessful.nameInput = i.getAttribute('name');
					fieldSuccessful.value = i.value;
					arrField.push(fieldSuccessful);
				});
				numberItem.numberPage = this.nomer;
				arrField.push(numberItem);
				console.log(arrField);

				axios({
					method: 'post',
					url: '',
					data: {
						arrField
					}
				}).then(function (response) {
					console.log(response);
				}).catch(function (error) {
					console.log(error);
				});

				fetch('js/documentList.json').then(response => response.json()).then(data => {
					this.createListDocuments(data);
				});
			},
		};

		(function () {
			fetch('js/categoryDocument.json').then(response => response.json()).then(data => {
					let choicesTwo;
					window.addEventListener("change", function (event) {
						if (event.target.classList.contains('select-category-document')) {
							const selectWrap = document.querySelector('#category');
							const resultSelectCategory = selectWrap.querySelector('.choices__item--selectable');

							if(document.querySelector('[data-new-list]')) {
								choicesTwo.destroy();
								document.querySelector('[data-new-list]').remove();
								document.querySelector('.filter-documentation__wrap--name').classList.remove('filter-documentation__wrap--change-width');
							}

							data.forEach(function(item) {
								if (item.nameCategory === resultSelectCategory.textContent) {
									selectWrap.closest('.filter-documentation__wrap--select').insertAdjacentHTML(
									'afterend', 
									`<div class='filter-documentation__wrap filter-documentation__wrap--select' data-new-list><div class='select-wrap'><select class='select' name='documents-category' placeholder='Документы категория'></select></div></div>`
									);

									const newList = document.querySelector('[data-new-list] select');
									newList.insertAdjacentHTML('afterbegin', `<option placeholder value='Выберите документ'>Выберите документ</option>`);
									
									item.listDocument.forEach(function(document) {
										console.log(document);
										newList.insertAdjacentHTML('beforeend', `<option value='${document}'>${document}</option>`);
									});

									choicesTwo = new Choices('[data-new-list] select', {
										itemSelectText: '',
										searchEnabled: false,
										placeholder: true,
									});

									if (document.querySelector('[data-new-list]').nextElementSibling.classList.contains('filter-documentation__wrap--name')) {
										document.querySelector('[data-new-list]').nextElementSibling.classList.add('filter-documentation__wrap--change-width')
									}
								}
							});
						};
					});
				});			
		})();

		(function () {
			filterForm.addEventListener('input', function (event) {

				changeDocument.cicleField();
				changeDocument.timer(arrField);
			});

			filterForm.addEventListener('change', function (event) {
				if (event.target.classList.contains('select')) {
					console.log('селект изменился');
					changeDocument.cicleField();
					filterForm.querySelectorAll('select').forEach(function (i) {
						let fieldSuccessful = {
							nameInput: '',
							value: '',
						};
						fieldSuccessful.nameInput = i.getAttribute('name');
						fieldSuccessful.value = i.value;
						arrField.push(fieldSuccessful);
					});
					//console.log(arrField);
					changeDocument.timer(arrField);
				}
			});

			paginationList.addEventListener('click', function (event) {
				event.preventDefault();
				// let index = [...this.querySelectorAll('.pagination__link')].findIndex(el => el == event.target);
				if (document.documentElement.clientWidth < 768) {
					changeDocument.show = 5;
				} else if (document.documentElement.clientWidth < 1300 && document.documentElement.clientWidth > 767) {
					changeDocument.show = 6;
				} else {};

				listDocument.querySelectorAll('*').forEach(function (i) {
					i.remove();
				});

				changeDocument.clickFunction(this, event.target);

				arrLinnks.forEach(function (i) {
					if (i.textContent === String(changeDocument.nomer)) {
						i.classList.add('pagination__link--active');
					}
				});
				window.scrollTo({
					top: document.querySelector('.documentation-sect').getBoundingClientRect().top + document.body.scrollTop,
				})
				console.log(document.querySelector('.documentation-sect').getBoundingClientRect().top + document.body.scrollTop);
			});

			document.addEventListener('click', function (event) {
				
				if (event.target.dataset.btnPagination) {
					event.preventDefault();

					let numberItem = {
						numberPage: '',
					};

					function changeActive() {
						listDocument.querySelectorAll('*').forEach(function (i) {
							i.remove();
						});
						changeDocument.cicleField();
						filterForm.querySelectorAll('select').forEach(function (i) {
							let fieldSuccessful = {
								nameInput: '',
								value: '',
							};
							fieldSuccessful.nameInput = i.getAttribute('name');
							fieldSuccessful.value = i.value;
							arrField.push(fieldSuccessful);
						});
						numberItem.numberPage = changeDocument.nomer;
						arrField.push(numberItem);
						console.log(arrField);

						axios({
							method: 'post',
							url: '',
							data: {
								arrField
							}
						}).then(function (response) {
							console.log(response);
						}).catch(function (error) {
							console.log(error);
						});
				
						fetch('js/documentList.json').then(response => response.json()).then(data => {
							changeDocument.createListDocuments(data);
						});
					}

					if (event.target.dataset.btnPagination === 'prev') {
						if(changeDocument.nomer > 1) {
							console.log('prev');
							console.log(--changeDocument.nomer)
							changeDocument.go(Number(changeDocument.nomer));
							changeDocument.refreshPagination(changeDocument.items);
							changeActive();
						}
					} else if (event.target.dataset.btnPagination === 'next') {        
						if(changeDocument.nomer < changeDocument.count) {
							console.log('next');
							console.log(++changeDocument.nomer)
							changeDocument.go(Number(changeDocument.nomer));
							changeDocument.refreshPagination(changeDocument.items);
							changeActive();
						}
					};
					arrLinnks.forEach(function (i) {
						if (i.textContent === String(changeDocument.nomer)) {
							i.classList.add('pagination__link--active');
						}
					});
					window.scrollTo({
						top: document.querySelector('.documentation-sect').getBoundingClientRect().top - document.body.scrollTop,
					})
					console.log(document.querySelector('.documentation-sect').getBoundingClientRect().top + document.body.scrollTop);
				};
				if (event.target.classList.contains('btn-more')) {
					event.preventDefault();

					let numberItem = {
						numberPage: '',
					};

					function changeActive() {
						changeDocument.cicleField();
						filterForm.querySelectorAll('select').forEach(function (i) {
							let fieldSuccessful = {
								nameInput: '',
								value: '',
							};
							fieldSuccessful.nameInput = i.getAttribute('name');
							fieldSuccessful.value = i.value;
							arrField.push(fieldSuccessful);
						});
						numberItem.numberPage = changeDocument.nomer;
						arrField.push(numberItem);
						console.log(arrField);

						axios({
							method: 'post',
							url: '',
							data: {
								arrField
							}
						}).then(function (response) {
							console.log(response);
						}).catch(function (error) {
							console.log(error);
						});
				
						fetch('js/documentList.json').then(response => response.json()).then(data => {
							changeDocument.createListDocuments(data);
						});
					}
				
					if(changeDocument.nomer < changeDocument.count) {
						console.log('next');
						console.log(++changeDocument.nomer)
						changeDocument.go(Number(changeDocument.nomer));
						changeDocument.refreshPagination(changeDocument.items);
						changeActive();
					}

					arrLinnks.forEach(function (i) {
						if (i.textContent === String(changeDocument.nomer)) {
							i.classList.add('pagination__link--active');
						}
					});
					
				};
			});

		})();

		// генерация пагинации
		if (document.documentElement.clientWidth < 768) {
			console.log('меньше 768')
			changeDocument.show = 5;
			changeDocument.nomer = 1;
			changeDocument.render();
			changeDocument.refreshPagination(changeDocument.items);
		} else if (document.documentElement.clientWidth < 1300 && document.documentElement.clientWidth > 767) {
			console.log('меньше 1300')
			changeDocument.show = 6;
			changeDocument.nomer = 1;
			changeDocument.render();
			changeDocument.refreshPagination(changeDocument.items);
		} else {
			console.log(changeDocument.count);
			changeDocument.nomer = 1;
			changeDocument.render();
			changeDocument.refreshPagination(changeDocument.items);
		};
		arrLinnks[0].classList.add('pagination__link--active');
		// генерация пагинации --- конец
		
	</script>
	
{% endblock %}